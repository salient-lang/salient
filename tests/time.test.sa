external import {
	fn fd_write(fd: i32, iovs: i32, iovs_len: i32, nwritten: i32): i32;

	fn clock_res_get(clock_id: i32): i32;
	fn clock_time_get(clock_id: i32, precision: i32): i32;
} from "wasix_32v1";

struct Date {
	day:   i32;     // Date [1, 31]
	month: i32;   // Month [0, 7]
	year:  i32;    // Year

	weekDay: i32; // Day of the week [0, 6] Starting Sunday
	yearDay: i32; // Day of the year [0, 365]
}

struct Time {
	seconds: i32;
	minutes: i32;
	hours:   i32;

	dayLightSavings: bool;
}

struct DateTime {
	date: Date;
	time: Time;
}

fn Now(): i32 {
	return clock_time_get(0, 1000000);
}


fn TimeFromUnix(unixTime: i32): Time {
	let t: Time = [];
	t.seconds = unix % 60;
	t.minutes = unix / 60 % 60;
	t.hours   = unix / 3600 % 24;
	t.isDST   = false;

	return t;
}

fn DateFromUnix(unixTime: i32): Time {
	// Needs higherlevel type casting to implement correctly
	// Source: http://howardhinnant.github.io/date_algorithms.html#civil_from_days
	// int s = 1313905026;
	// int z = s / 86400 + 719468;
	// int era = (z >= 0 ? z : z - 146096) / 146097;
	// unsigned doe = static_cast<unsigned>(z - era * 146097);
	// unsigned yoe = (doe - doe/1460 + doe/36524 - doe/146096) / 365;
	// int y = static_cast<int>(yoe) + era * 400;
	// unsigned doy = doe - (365*yoe + yoe/4 - yoe/100);
	// unsigned mp = (5*doy + 2)/153;
	// unsigned d = doy - (153*mp+2)/5 + 1;
	// unsigned m = mp + (mp < 10 ? 3 : -9);
	// y += (m <= 2);
	// std::cout << m << '/' << d << '/' << y << '\n'; // 8/21/2011

	let s = unixTime;
	let z = s/86400 + 719468;

	let t1 = z;
	if (z < 0) {
		t1 = z -146097;
	};

	// let era: i32 = if (z >= 0) z else z/146097;
	let era = z;
	if (z < 0) {
		era = z/146097;
	};

	let doe: u32 = (z - era*146097) as u32;
	let yoe: u32 = (doe - doe/1460 + doe/36524 - doe/146096) / 365;
	let y:   i32 = (yoe as i32) + era*400;
	let doy: u32 = doe - (365*yoe + yoe/4 - yoe/100);
	let mp:  u32 = (5*doy + 2)/153;
	let d:   u32 = doy - (153*mp + 2)/5 + 1;
	let m:   u32 = mp + if (mp < 10) 3 else -9;

	y = y + (m <= 2 as i32);

	let totalDays = unixTime / (24*60*60);

	let date: Date = [
		.day = d,
		.month = m,
		.year = y,

		.weekDay = (totalDays + 4) % 7,
		.yearDay = (153*(m + if (m > 2) 2 else -3) + 2)/5 + d-1
	];

	return date;
}

fn DateTimeFromUnix(unixTime: i32): DateTime {
	return [
		.date = DateFromUnix(unixTime),
		.time = TimeFromUnix(unixTime)
	];
}


fn main(): none {
	let t = DateTimeFromUnix(0);

	return;
}

// test "Valid Epoch" {
// 	let t = DateTimeFromUnix(0);
// 	if ( t.date.day   != 0
// 		|| t.date.month != 0
// 		|| t.date.year  != 0

// 		|| t.date.weekDay != 0
// 		|| t.date.yearDay != 0
// 	) return false;

// 	if ( t.time.seconds != 0
// 		|| t.time.minutes != 0
// 		|| t.time.hours   != 0
// 	) return false;

// 	return true;
// }

// test "1st September 2000" {
// 	let t = DateTimeFromUnix(967766400000);
// 	if ( t.date.day   != 1
// 		|| t.date.month != 8
// 		|| t.date.year  != 2000

// 		|| t.date.weekDay != 5
// 		// || t.date.yearDay != 0
// 	) return false;

// 	if ( t.time.seconds != 0
// 		|| t.time.minutes != 0
// 		|| t.time.hours   != 0
// 	) return false;

// 	return true;
// }

// test "2024-05-31T12:08:45.000Z" {
// 	let t = DateTimeFromUnix(1717121325290);
// 	if ( t.date.day   != 31
// 		|| t.date.month != 4
// 		|| t.date.year  != 2024

// 		|| t.date.weekDay != 5
// 		// || t.date.yearDay != 0
// 	) return false;

// 	if ( t.time.seconds != 45
// 		|| t.time.minutes != 8
// 		|| t.time.hours   != 22
// 	) return false;

// 	return true;
// }