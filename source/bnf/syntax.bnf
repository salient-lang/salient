program ::= %w* ( stmt_top %w* )* ;
	stmt_top ::= function | structure | external | test ;


#=============================
#  Helper patterns
#=============================
w ::= " " | "\t" | nl | comment ;
nl ::= "\r\n" | "\n" ;

digit ::= "0" -> "9" ;
	digit_nz ::= "1" -> "9" ;
letter ::= "a" -> "z" | "A" -> "Z" ;

terminate ::= ( w* ";" w* );



#=============================
#  Comments
#=============================
comment ::= comment_single | comment_multi ;
	comment_single ::= "//" !( nl )* nl? ; # Optional as the comment might be on a EOF
	comment_multi  ::= "/*" ( "\\*" | !( "*/" )+ )* "*/" ;



#=============================
#  Constants
#=============================
constant ::= boolean
	| string
	| float | integer ;

string ::= string_plain | string_template ;
	string_plain ::= %"\"" ( str_hex_u8 | str_escape | !"\"" )* %"\"" ;
		str_hex_u8  ::= %"\\x" ...( hexidecimal hexidecimal ) ;
		str_escape  ::= %"\\" !"" ;
	string_template ::= %"\`" ( str_hex_u8 | str_escape | string_tag | !"`" )* %"`" ;
		string_tag ::= %"${" expr %"}" ;

boolean ::= "true" | "false" ;

void ::= "void" ;

hexidecimal ::= "0"->"9" | "a" -> "f";

integer ::= ...integer_u ;
	digitish  ::= %"_" | digit;
	integer_u ::= ( digit_nz digitish* ) | zero ;
	zero ::= "0" ;
float ::= ...( integer "." integer_u ( "e" integer )? ) ;



#=============================
#  Variables
#=============================
name ::= ...(( letter | "_" )+ ( letter | digit | "_" )*) ;

access ::= name ( %w* accessor )* ;
	accessor ::= access_static | access_dynamic | access_comp ;
	access_static  ::= %"." ...name ;
	access_dynamic ::= %"[]" ;
	access_comp    ::= %"#[]";

declare ::= %( "let" w* ) name %w* (%":" %w* access %w*)? ( %("=" w*) expr )? %(w* ";" w*) ;
assign  ::= access %( w* "=" w*) expr %terminate ;



#=============================
#  Storage
#=============================
structure ::= %("struct" w*) ...name %w* struct_type? %( "{" w* ) struct_stmt* %( w* "}" w* );
	struct_type   ::= %( ":" w* ) ...name %w* ;
	struct_stmt   ::= struct_attr | struct_spread ;
		struct_attr   ::= ...name %( w* ":" w* ) access %terminate ;
		struct_spread ::= %( "..." ) access %terminate ;

container ::= %(w* "[" w*) ( container_item ( %(w* "," w*) container_item )* %w* %","? )? %("]" w*) ;
	container_item  ::= container_map | container_value ;
	container_map   ::= %"." name %(w* "=" w*) expr ;
	container_value ::= expr ;


#=============================
#  Function
#=============================
function ::= func_head %w* ( block | ";" ) %w* ;
	func_head ::= %("fn" w+) ...name %( w* "(" w* ) func_args %(w* ")" w*) %(":" w*) access ;
	func_args ::= ( func_arg %w* ( %( "," w* ) func_arg )* )? ;
		func_arg ::= ...name %( w* ":" w* ) access ;

block ::= %( "{" w* ) block_stmt* %( w* "}" w* ) ;
	block_stmt ::= assign | declare | return | lift | statement ;

func_call ::= access func_call_body;
	func_call_body ::= %( w* "(" w* ) ( expr %w* ( %( "," w* ) expr %w* )* )? %( ")" w* ) ;

return ::= %"return" "_tail"? ( %w+ expr)? %( w* ";" w* );
lift   ::= %"lift" %w+ expr %( ";" w* );
# drop  ::= %"drop" %w+ expr %( ";" w* );


#=============================
#  Expression
#=============================
expr ::= expr_arg %w* ( ...expr_infix %w* expr_arg %w* )* ;
	expr_prefix ::= "!" | "-" ;
	expr_infix ::= "&&" | "||" | "^" | "==" | "!=" | "<=" | ">=" | "<" | ">"
		| "%" | "*" | "/" | "+" | "-"
		| "as" | "instanceof"
		| "." | "->" ;
	expr_postfix ::= expr_call | expr_get | expr_param | expr_loan ;
		expr_param ::= %"#[" %w* arg_list? %w* %"]" ;
		expr_call  ::=  %"(" %w* arg_list? %w* %")" ;
		expr_get   ::=  %"[" %w* arg_list? %w* %"]" ;
		expr_loan  ::= "@" | "$" ;
	expr_arg ::= expr_prefix? %w* expr_val %w* expr_postfix* ;
	expr_val ::= constant | expr_brackets | block | container | if | name ;
	expr_brackets ::= %( "(" w* ) expr %( w* ")" ) ;

arg_list ::= expr ( %(w* "," w*) expr )* ;

if ::= %("if" w*) expr %w* expr %w* ( %"else" %w* expr )? ;

statement ::= expr %terminate ;


#=============================
#  External
#=============================
external ::= %( "external" w+ ) ( ext_import | ext_export ) ;
	ext_import ::= %( "import" w* "{" w* ) ext_imports* %( w* "}" w* "from" w*) string_plain %(w* ";" w*) ;
		ext_imports    ::= function | ext_import_var ;
		ext_import_var ::= %( "let" w* ) name %( w* ":" w* ) access %(w* ";" w*);
	ext_export ::= "export" ;

#=============================
#  Test
#=============================
test ::= %( "test" w+ ) string_plain %w* block ;